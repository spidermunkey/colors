{"mappings":"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","sources":["public/js/adapters.js"],"sourcesContent":["function getRange(hue) {\n    let color = undefined;\n    let rangeFinder = [\n        [0,15,'red'],\n        [15,45,'orange'],\n        [45,60,'yellow'],\n        [60,180,'green'],\n        [180,240,'blue'],\n        [240,300,'purple'],\n        [300,360,'rose'],\n    ]\n\n    for (let i = 0; i < rangeFinder.length; i++) {\n        if (hue >= rangeFinder[i][0] && hue <= rangeFinder[i][1]) {\n            color = rangeFinder[i][2];\n            break\n        }\n    }\n    return color;\n\n}\n\n// RGB CONVERSIONS \nfunction rgbToHsl (r,g,b) \n{\n    let red = r / 255;\n    let green = g / 255;\n    let blue = b / 255;\n\n    let colorMax = Math.max(red,green,blue);\n    let colorMin = Math.min(red,green,blue);\n\n    let delta = colorMax - colorMin;\n    let midrange = (colorMax + colorMin) / 2;\n    \n    // midrange \n        // lightness is the average of the largest and smallest color components\n    function getLightness() {\n        let l = (colorMax + colorMin) / 2;\n        return Math.round(l * 100);\n    }\n\n    // range\n    // saturation is simply the chroma scaled to fill\n    // the interval [0, 1] for every combination of hue and lightness\n    function getSaturation() {\n        let s = delta / (1 - Math.abs(2 * midrange - 1));\n        return  Math.round(s * 100);\n    }\n\n    // https://stackoverflow.com/questions/39118528/rgb-to-hsl-conversion\n    function getHue() {\n        let h;\n        let differenceOverDelta = subtractOverDelta(delta);\n\n        if (delta === 0) {\n            h = 0;\n        }\n\n        if (colorMax === red) {\n            h = (differenceOverDelta(green,blue) + (g < b ? 6 : 0));\n        }\n        if (colorMax === green) {\n            h = (differenceOverDelta(blue,red) + 2);\n        }\n        if (colorMax === blue) {\n            h = (differenceOverDelta(red,green) + 4);\n        }\n\n        return Math.round(h * 60);\n    }\n\n    function subtractOverDelta(delta) {\n        return function(expression1,expression2) {\n            return ((expression1 - expression2) / delta);\n        }\n    }\n\n    let lightness = getLightness() || 0;\n    let saturation = getSaturation() || 0;\n    let hue = getHue() || 0;\n\n    return [hue,saturation,lightness];\n}\n\nfunction rgbToHex(r,g,b) \n{\n    return create_HEX_String([\n        toBase16(r),\n        toBase16(g),\n        toBase16(b),\n    ]);\n}\n\nfunction toBase16(base10) \n{   \n    if (base10 === 0) {\n        return '00';\n    }\n    if (base10 > 255) {\n        return 'TooHigh';\n    }\n    if (!Number.isInteger(base10)) {\n        console.log(base10);\n        console.log('NAN!');\n        return parseInt(base10).toString(16);\n    }\n\n    let num = base10.toString(16)\n\n    if (base10 < 16) \n        return '0' + num;\n\n    return num\n}\n    \n// HEX CONVERSIONS\nfunction hexToRgb(hex) \n{\n    let a = hex.replace('#','');\n    let b = a.split('');\n    let c = b.length;\n\n    return c === 3 ? convertThreeDigitHex(b) :\n            c === 6 ? convertSixDigitHex(a) :\n            'invalid hex';\n            // console.log(new Error(`${hex} is not a valid hex`));\n}\n\nfunction toDecimal(num) {\n    return num / 100;\n}\n\nfunction toBase10(base16) \n{\n    if (base16.toString().length > 2) {\n        return 'too many digits for css'\n    }\n\n    return parseInt(base16,16);\n}\n\nfunction repeatThenConvertBase10(base16) \n{\n    return toBase10(base16.repeat(2))\n}\n\nfunction convertThreeDigitHex(arrOfThree) // [f,f,f] => [ff,ff,ff]\n{\n    let values = arrOfThree.map(repeatThenConvertBase10);\n    return values;\n}\n\nfunction convertSixDigitHex(sixDigitHex)  // #ffffff => [ff,ff,ff]\n{\n    let values = sixDigitHex\n            .split(/(..)/g)\n                .filter(s => s)\n                    .map(toBase10);\n    return values\n}\n\nfunction create_HEX_String(values) \n{\n    let string = '#' + values.join('');\n    return string;\n}\n\n// HSL CONVERSIONS\nfunction hslToRgb (hue, sat, light) \n{\n    //https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB\n    hue = hue % 360;\n\n    if (hue < 0) {\n        hue += 360;\n    }\n\n    sat /= 100;\n    light /= 100;\n\n    function f(n) {\n        let k = (n + hue/30) % 12;\n        let a = sat * Math.min(light, 1 - light);\n        return Math.round(255 * (light - a * Math.max(-1, Math.min(k - 3, 9 - k, 1))));\n    }\n\n    return [f(0), f(8), f(4)];\n}\n\nfunction hslToHsv(h,sat,lightness) {\n    // console.dir([h,sat,lightness])\n    let s = sat / 100;\n    // console.log(s)\n    let l = lightness/100;\n    let v = l + (s * (Math.min(l, 1 - l)));\n    // console.log(h,s,v,l)\n    if (v === 0) s = 0\n    else s = 2 * (1 - l/v);\n    s = Math.round(s * 100);\n    v = Math.round(v * 100);\n    // console.log(h,s,v)\n    return [h,s,v]\n}\n\nfunction hsvToHsl(hue,sat,value) {\n    let h = hue\n    let s = sat/100\n    let v = value/100;\n\n    let l = v * (1 - s/2)\n    if (l === 0 || l === 1) s = 0\n    else s = Math.round(((v - l) /Math.min(l, 1-l)) * 100)\n    l = Math.round(l * 100);\n    return [h, s, l]\n}\n\nfunction HSLToRGB(h, s, l) {\n    s /= 100;\n    l /= 100;\n    const k = n => (n + h / 30) % 12;\n    const a = s * Math.min(l, 1 - l);\n    const f = n =>\n        l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\n    return [255 * f(0), 255 * f(8), 255 * f(4)];\n};\n\nfunction create_HSL_String(values) \n{   \n    return `hsl(${values[0]},${values[1]}%,${values[2]}%)`\n}\n\nfunction deconstruct_HSL_String(strVal) {\n    return color\n                .replace('hsla','')\n                .replace('(','')\n                .replace(')','')\n                .replace('deg', '')\n                .replaceAll('%','')\n                .split(',')\n                .map(Number)\n}\n\n// function getTone(color) {\n//     let { saturation, lightness } = color\n\n//     const test = greyscale(lightness,saturation)\n//     color['tone'] = test[0];\n\n//     if (test[1] === true) {\n//         return false;\n//     }\n\n//     color['tone'] = test[0];\n//     return true;\n// }\n\nfunction getContrast(color) {\n\n    // https://stackoverflow.com/questions/1855884/determine-font-color-based-on-background-color\n    let d = 0;\n    let [r,g,b] = color.rgb;\n    // let [h,s,l] = color.hsl;\n\n    // Counting the perceptive lightness - human eye favors green color...      \n    let lightness = (0.299 * r + 0.587 * g + 0.114 * b)/255;\n    \n    if (lightness > 0.5)\n        d = 0; // bright colors - black font\n    else\n        d = 255; // dark colors - white font\n                \n    return  rgbToHex(d, d, d);\n}\n\n\n\nconst rotateHue = rotation => ({hue, ...rest}) => {\n    const modulo = (x, n) => (x % n + n) % n;\n    const newHue = modulo(hue + rotation, 360);\n  return { ...rest, hue: newHue };\n  }\n\nconst rotate30 = rotateHue(30);\nconst getComplementary = rotateHue(180);\nconst getTriadic = color => {\n    const first = rotateHue(120);\n    const second = rotateHue(-120);\n        return [first(color), second(color)];\n}\n\nconst saturate = x => ({saturation, ...rest}) => ({\n    ...rest,\n    saturation: Math.min(1, saturation + x),\n});\n\nconst desaturate = x => ({saturation, ...rest}) => ({\n    ...rest,\n    saturation: Math.max(0, saturation - x),\n});\n\nconst lighten = x => ({lightness, ...rest}) => ({\n    ...rest,\n    lightness: Math.min(1, lightness + x)\n});\n\nconst darken = x => ({lightness, ...rest}) => ({\n    ...rest,\n    lightness: Math.max(0, lightness - x)\n});\n\nfunction LightenDarkenColor(col, amt) {\n//    https://css-tricks.com/snippets/javascript/lighten-darken-color/\n    var usePound = false;\n  \n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n \n    var num = parseInt(col,16);\n \n    var r = (num >> 16) + amt;\n \n    if (r > 255) r = 255;\n    else if  (r < 0) r = 0;\n \n    var b = ((num >> 8) & 0x00FF) + amt;\n \n    if (b > 255) b = 255;\n    else if  (b < 0) b = 0;\n \n    var g = (num & 0x0000FF) + amt;\n \n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n \n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n  \n}\n\nfunction getTone(lightness,saturation) {\n    /*  README\n        SD[#] 'STANDARD DEVIATION' A RANGE CATCHING ANY COLORS THERIN\n        S[#] 'SATURATION'\n        L[#] 'LIGHTNESS'\n\n        [[MOODY COLORS]]\n        \n        Earth Tones are defined as colors low in lightness and saturation\n        L[45] - S[72] -- {SD[45] IF L[30] - S[45]}\n\n        Jewel Tones are defined as colors low in lightness high in saturation\n        L[50] - S[45+]\n\n        \n        [[BRIGHT COLORS]]\n        \n        Neon tones are high in saturation with a centered lightness\n            L[45-50] - S[99+]\n        Luminous tones are high in saturation and high in lightness\n            L[75] - S[90+]\n        Vivid tones are high in saturation with a lightness above 50% and below vivid thresholds of 70%\n            L[45-50] - S[50-70]\n    \n        [[FLAT COLORS]]\n        \n        Pastel tones take a high lightness threshold starting from 70% and \n        any saturation that isn't gray within a 60% deviation\n            L[70+] S[25+] -- {SD[60] IF L[90+]}\n        \n        Muted tones like pastel take a high lightness threshold just under pastel \n        but are muted by a lack of saturation spaning accross a 45%-60% threshold\n            L[65-70] -- {SD[60-45]}\n\n        Clean colors represent a catch all for flat colors with an average saturation and lightness\n            L[45+] - S[32-70]\n        \n    */ \n    let deviation = lightness - saturation;\n    let result = ['no dice', false];\n    // when lightness is between 90 and 10 and saturation is less than 5\n\n    // [grey,white,black]\n    if ((saturation <= 6)){\n        if (lightness <= 10) {\n            return result = ['black',false];\n        }\n        if (lightness >= 90) {\n            return result = ['white',false];\n        }\n        return result = ['grey',true];\n    }\n\n    if (lightness <= 5 && saturation <= 50){\n        return result = ['black', false]\n    }\n    if (lightness > 4 && lightness < 9 && saturation < 20)\n        return result = ['black', false]\n\n    if (lightness > 4 && lightness <= 9 && saturation >= 20)\n        result = ['earth', false]\n\n    if (lightness === 100)\n        return result = ['white',false]\n    if (lightness < 5)\n        return result = ['black', false]\n    // when lightness is more than 45\n    // [pastel,bright,muted]\n    if (lightness > 45 && lightness <= 99 && saturation > 5) {\n        if (deviation <= 60 && deviation > -5) {\n            // grey catch\n            if (deviation <= 60 && deviation > 56) {\n                // its greyish\n                return result = ['washed',true];\n            }\n        }\n        // grey catch\n        if (deviation > 62) {\n            // light grey\n            return result = ['grey',true]\n        }\n        // pastel catch\n        if (lightness >= 65 && saturation > 10) {\n            if (lightness >= 65  && lightness <= 80 && (deviation < 0))\n                return result = ['clean',false]\n            return result = ['pastel',false]\n        }\n        // bright catch\n        if (lightness < 70 && lightness >= 45 && saturation >= 45) {\n            if (saturation >= 99 && lightness >= 45 && lightness <= 55)\n                return result = ['neon', false]\n            if (saturation >= 90 && lightness >= 70)\n                return result = ['luminous', false];\n            if (saturation > 80 && lightness >= 45 && lightness < 70) \n                return result = ['vivid', false];\n            // if (saturation < 80 && saturation > 70 && lightness > 40 && lightness < 70)\n            //     return result = ['vivid2',false];\n        }\n        // clean colors\n        if (saturation > 32 && lightness > 45)\n            return result = ['clean',false]\n        // muted colors\n        if (lightness <= 65 && saturation < 70 && (deviation < 60 || saturation < 45))\n            return result = ['muted',false]\n        }\n\n    // when lightness is less than 50\n    // [earth,jewel]\n    if (lightness <= 50 && lightness >= 10 && saturation > 5) {\n        if (saturation <= 72 && lightness <= 45)\n            return result = ['earth',false];\n        if (saturation >= 45)\n            return result = ['jewel',false];\n\n\n        if (deviation < 45 && deviation > 0 && saturation < 45 && lightness < 30) {\n            // its an [earth,washed,muted] tone\n            return result = ['earth',false];\n        }\n        if (deviation <= 0) {\n            return result = ['jewel', false]\n        }\n        return result = ['grey',true];\n        // its mid/natural grey\n    }\n    \n    // last call for pastel\n    if (lightness > 90 && lightness < 99) { \n        if (deviation <= 60) {\n            return result = ['pastel',false];\n        }\n        return result = ['grey',true];\n    }\n\n    return result;\n}\n\n\n// function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}\n\n// function toHex(n) {\n//     // http://www.javascripter.net/faq/rgbtohex.htm\n//  n = parseInt(n,10);\n//  if (isNaN(n)) return \"00\";\n//  n = Math.max(0,Math.min(n,255));\n//  return \"0123456789ABCDEF\".charAt((n-n%16)/16)\n//       + \"0123456789ABCDEF\".charAt(n%16);\n\n//       /*\n// Notes: The script parses the input R, G, B values as integers using \n// the standard function parseInt(string,10); \n// the second, optional argument 10 specifies \n// that the value must be parsed as a decimal number. \n// (If we omit the 10, the script would still work, \n//     except for some input values starting with 0, e.g. 009 or 011,\n//      where it might incorrectly assume octal input.) \n//      We use the standard functions Math.min and Math.max to \n//      make sure that the input values are within the range from 0 to 255. \n//      The interested reader might notice that a nicer way to convert n to \n//      a hexadecimal string is to use n.toString(16); \n//      however, the above code was written back in the ancient era when \n//      JavaScript 1.0 was still around,\n//      and the construct n.toString(16) won't work in JavaScript 1.0! \n//       */\n//     }\n\n"],"names":[],"version":3,"file":"index.6c8eef89.js.map","sourceRoot":"/__parcel_source_root/"}